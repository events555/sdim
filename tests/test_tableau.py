import pytest
import numpy as np
from sdim import ExtendedTableauSimulator


def test_hadamard():
    tab1 = ExtendedTableauSimulator()
    tab1.hadamard(0)
    tab1.modulo()
    assert np.array_equal(tab1.x_block, np.array([[1]]))
    assert np.array_equal(tab1.z_block, np.array([[0]]))

    tab2 = ExtendedTableauSimulator(num_qudits=2)
    tab2.hadamard(0)
    tab2.modulo()
    assert np.array_equal(tab2.x_block, np.array([[1, 0], [0, 0]]))
    assert np.array_equal(tab2.z_block, np.array([[0, 0], [0, 1]]))
    
    tab3 = ExtendedTableauSimulator(num_qudits=2)
    tab3.hadamard(0)
    tab3.hadamard(1)
    tab3.modulo()
    assert np.array_equal(tab3.x_block, np.array([[1, 0], [0, 1]]))
    assert np.array_equal(tab3.z_block, np.array([[0, 0], [0, 0]]))

    tab4 = ExtendedTableauSimulator()
    tab4.hadamard(0)
    tab4.hadamard_inv(0)
    tab4.modulo()
    assert np.array_equal(tab4.x_block, np.array([[0]]))
    assert np.array_equal(tab4.z_block, np.array([[1]]))

def test_phase():
    tab1 = ExtendedTableauSimulator()
    tab1.hadamard(0)
    tab1.phase(0)
    tab1.phase(0)
    tab1.hadamard(0)
    tab1.modulo()
    assert np.array_equal(tab1.phase_vector, np.array([2]))
    assert np.array_equal(tab1.x_block, np.array([[0]]))
    assert np.array_equal(tab1.z_block, np.array([[1]]))

def test_pauli():
    tab1 = ExtendedTableauSimulator()
    tab1.x(0)
    tab1.modulo()
    assert np.array_equal(tab1.phase_vector, np.array([2]))
    assert np.array_equal(tab1.x_block, np.array([[0]]))
    assert np.array_equal(tab1.z_block, np.array([[1]]))

    tab2 = ExtendedTableauSimulator()
    tab2.x(0)
    tab2.x_inv(0)
    tab2.modulo()
    assert np.array_equal(tab2.phase_vector, np.array([0]))
    assert np.array_equal(tab2.x_block, np.array([[0]]))
    assert np.array_equal(tab2.z_block, np.array([[1]]))

    tab3 = ExtendedTableauSimulator(dimension=3)
    tab3.x(0)
    tab3.modulo()
    assert np.array_equal(tab3.phase_vector, np.array([2]))
    assert np.array_equal(tab3.x_block, np.array([[0]]))
    assert np.array_equal(tab3.z_block, np.array([[1]]))

    tab4 = ExtendedTableauSimulator()
    tab4.hadamard(0)
    tab4.z(0)
    tab4.modulo()
    assert np.array_equal(tab4.phase_vector, np.array([2]))
    assert np.array_equal(tab4.x_block, np.array([[1]]))
    assert np.array_equal(tab4.z_block, np.array([[0]]))

    tab5 = ExtendedTableauSimulator(dimension=3)
    tab5.hadamard(0)
    tab5.z(0)
    tab5.modulo()
    assert np.array_equal(tab5.phase_vector, np.array([2]))
    assert np.array_equal(tab5.x_block, np.array([[2]]))
    assert np.array_equal(tab5.z_block, np.array([[0]]))

    tab6 = ExtendedTableauSimulator()
    tab6.hadamard(0)
    tab6.z(0)
    tab6.z_inv(0)
    tab6.modulo()
    assert np.array_equal(tab6.phase_vector, np.array([0]))
    assert np.array_equal(tab6.x_block, np.array([[1]]))
    assert np.array_equal(tab6.z_block, np.array([[0]]))

def test_cnot():
    tab1 = ExtendedTableauSimulator(num_qudits=2)
    tab1.x(0)
    tab1.cnot(0, 1)
    tab1.modulo()
    assert np.array_equal(tab1.phase_vector, np.array([2, 0]))
    assert np.array_equal(tab1.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab1.z_block, np.array([[1, 1], [0, 1]]))
    tab2 = ExtendedTableauSimulator(num_qudits=2, dimension=3)
    tab2.x(0)
    tab2.x(0)
    tab2.cnot(0, 1)
    tab2.modulo()
    assert np.array_equal(tab2.phase_vector, np.array([1, 0]))
    assert np.array_equal(tab2.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab2.z_block, np.array([[1, 2], [0, 1]]))

def test_swap():
    tab1 = ExtendedTableauSimulator(num_qudits=2)
    tab1.x(0)
    tab1.swap(0, 1)
    tab1.modulo()
    assert np.array_equal(tab1.phase_vector, np.array([2, 0]))
    assert np.array_equal(tab1.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab1.z_block, np.array([[0, 1], [1, 0]]))
    tab2 = ExtendedTableauSimulator(num_qudits=2, dimension=3)
    tab2.x(0)
    tab2.x(0)
    tab2.swap(0, 1)
    tab2.modulo()
    assert np.array_equal(tab2.phase_vector, np.array([1, 0]))
    assert np.array_equal(tab2.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab2.z_block, np.array([[0, 1], [1, 0]]))
    tab3 = ExtendedTableauSimulator(num_qudits=2)
    tab3.x(0)
    tab3.swap(0, 1)
    tab3.swap(0, 1)
    tab3.modulo()
    assert np.array_equal(tab3.phase_vector, np.array([2, 0]))
    assert np.array_equal(tab3.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab3.z_block, np.array([[1, 0], [0, 1]]))

def test_cz():
    tab1 = ExtendedTableauSimulator(num_qudits=2)
    tab1.hadamard(0)
    tab1.x(1)
    tab1.cz(0, 1)
    tab1.hadamard(0)
    tab1.modulo()
    assert np.array_equal(tab1.phase_vector, np.array([0, 2]))
    assert np.array_equal(tab1.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab1.z_block, np.array([[1, 0], [1, 1]]))
    tab2 = ExtendedTableauSimulator(num_qudits=2, dimension=3)
    tab2.hadamard(0)
    tab2.x(1)
    tab2.cz(0, 1)
    tab2.hadamard_inv(0)
    tab2.modulo()
    assert np.array_equal(tab2.phase_vector, np.array([0, 2]))
    assert np.array_equal(tab2.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab2.z_block, np.array([[1, 0], [2, 1]]))

def test_inverse():
    tab1 = ExtendedTableauSimulator(num_qudits=2)
    tab1.hadamard(0)
    tab1.x(1)
    tab1.cz(0, 1)
    tab1.hadamard(0)
    tab1.cnot(1,0)
    tab1.z_inv(1)
    tab1.z(1)
    tab1.cnot_inv(1,0)
    tab1.hadamard_inv(0)
    tab1.cz_inv(0, 1)
    tab1.x_inv(1)
    tab1.hadamard_inv(0)
    tab1.modulo()
    assert np.array_equal(tab1.phase_vector, np.array([0, 0]))
    assert np.array_equal(tab1.x_block, np.array([[0, 0], [0, 0]]))
    assert np.array_equal(tab1.z_block, np.array([[1, 0], [0, 1]]))